#= 
Vocabulary for the purposes of this document (I am VERY open to clearer/more 
precise terminology suggestions as I'm not necessarily happy with these but 
rather needed to set some conventions of what means what):

FEATURE OBJECT: a struct that describes "the features of a feature" – i.e. its name,
                possible values, how to encode it, etc. but does NOT store an actual
                instance of its value

ATOMS OBJECT: (borrowed from ASE terminology) a struct that describes a molecule,
              crystal, etc. in whatever representation will be ingested by an ML
              model (e.g. a graph), and can also store encoded features. If it stores
              encoded features, it MUST include requisite metadata (typically in the
              form of a list of FEATURE OBJECTs and potentially also a function handle)
              to decode the function again. Examples incldue AtomGraph, WeaveMol (though
              their current incarnations may need to be adapted)

ENCODING: the process of translating a feature from its human-readable form (e.g. a 
          float, string, etc.) to whatever will be ingested by ML model (could be as
          simple as making a copy, more often is, e.g. building a one-hot vector)

DECODING: The inverse process to encoding. Note that in many cases (e.g. a continuous-
          valued feature encoded to a one-hot vector), the process isn't fully invertible,
          i.e. you can't get back a precise value but rather only a range corresponding
          to the associated onehot bin

FEATURIZATION: the process of attaching encoded features to an atoms object (in a 
               slight abuse of terminology, a featurization function  may also perform
               feature encoding).

=#
